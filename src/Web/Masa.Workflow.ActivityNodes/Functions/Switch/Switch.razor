@namespace Masa.Workflow.ActivityNodes.Switch

@inherits Masa.Workflow.ActivityCore.Components.ActivityNode<SwitchMeta>

@base.BuildRenderTree

@code {

    protected override void DrawerContent(RenderTreeBuilder __builder)
    {
        <MTextField @bind-Value="FormModel.Property"
                    Label="Name"
                    Disabled
                    Dense
                    Outlined
                    Prefix="Msg."
                    HideDetails="@("auto")" />
        <NodeOutputs Title="i18n.rule" TItem="Rule"
                     Items="FormModel.MetaData.Rules">
            <ChildContent>
                @foreach (var item in FormModel.MetaData.Rules)
                {
                    <div class="d-flex align-center mb-2">
                        <EnumSelect @bind-Value="item.Operator"
                                    TValue="Operator"
                                    Dense
                                    Filled
                                    Clearable=false
                                    Label="Operator"
                                    Class="mr-2"
                                    Style="max-width: 156px"
                                    HideDetails="true" />
                        <MTextField @bind-Value="item.Value"
                                    Dense 
                                    Style="@HidenValue(item.Operator)"
                                    Label="Value"
                                    HideDetails="true" />
                        <MButton Icon OnClick="@(() => RemoveRule(item, context.RemoveItem))">
                            <MIcon>$cancel</MIcon>
                        </MButton>
                    </div>
                }
                <MButton Color="primary" Outlined Block OnClick="@(() => AddNewRule(context.AddNew))">i18n.new-rule</MButton>
            </ChildContent>

        </NodeOutputs>

        <EnumSelect @bind-Value="FormModel.MetaData.SwitchMode" TValue="SwitchMode" Clearable=false Label="EnforceRule" />
    }

    private void AddNewRule(Action addNew)
    {
        FormModel.MetaData.Rules.Add(new Rule(Operator.Empty, default));
        addNew();
    }

    private void RemoveRule(Rule rule, Action<Rule> removeItem)
    {
        FormModel.MetaData.Rules.Remove(rule);
        removeItem(rule);
    }

    private string HidenValue(Operator @operator)
    {
        var style = "";
        if (@operator == Operator.Empty || @operator == Operator.NotEmpty
            || @operator == Operator.Null || @operator == Operator.NotNull 
            || @operator == Operator.True || @operator == Operator.False
            || @operator == Operator.Otherwise)
        {
            style = "visibility: hidden;";
        }
        return style;
    }
}
