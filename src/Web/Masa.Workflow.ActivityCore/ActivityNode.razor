@typeparam TMeta
@typeparam T
@attribute [JSCustomElement]

<Node Name="@_cachedModel.DisplayName"
      Color="@Color"
      Icon="@_cachedModel.Icon"
      IconRight="@_cachedModel.IconRight"
      @ondblclick="@OnDblClick"
      @ref="_node">
</Node>

<PDrawer @bind-Value="_drawer"
         Title="edit-node"
         BodyClass="pa-0"
         FormModel="@FormModel"
         OnSave="@OnSave">
    <ObjectGraphDataAnnotationsValidator />
    <MTabs @bind-Value="@_tab">
        <MTab>Meta</MTab>
        <MTab>Node</MTab>
    </MTabs>
    <MDefaultsProvider Defaults="GlobalConfig.ComponentDefaults">
        <MWindow Value="@_tab" Class="pa-6">
            <MWindowItem Transition="">
                @(ChildContent ?? (builder => DrawerContent(builder)))
            </MWindowItem>
            <MWindowItem Transition="">
                <MTextField @bind-Value="@FormModel.Name"
                            Label="name">
                </MTextField>
                <MSwitch @bind-Value="@FormModel.ShowLabel"
                         Inset
                         Label="show-label">
                </MSwitch>

                @{
                    var hasInput = FormModel.Input > 0;
                    var hasOutput = FormModel.Output > 0;
                }

                @if (hasInput || hasOutput)
                {
                    <OutlineCard Title="node-label" Class="mb-4">
                        @if (hasInput)
                        {
                            <OutlineCard Title="input">
                                @for (var index = 0; index < FormModel.Input; index++)
                                {
                                    var i = index;
                                    <MTextField Value="@FormModel.InputLabels[i]"
                                                ValueChanged="v => FormModel.InputLabels[i] = v"
                                                TValue="string"
                                                Label="@((i + 1).ToString())">
                                    </MTextField>
                                }
                            </OutlineCard>
                        }
                        @if (hasOutput)
                        {
                            <OutlineCard Title="Output">
                                @for (var index = 0; index < FormModel.Output; index++)
                                {
                                    var i = index;
                                    <MTextField Value="@FormModel.OutputLabels[i]"
                                                ValueChanged="v => FormModel.OutputLabels[i] = v"
                                                TValue="string"
                                                Label="@((i + 1).ToString())">
                                    </MTextField>
                                }
                            </OutlineCard>
                        }
                    </OutlineCard>
                }

                <MTextarea @bind-Value="FormModel.Description" Label="description"></MTextarea>
            </MWindowItem>
        </MWindow>
    </MDefaultsProvider>
</PDrawer>
